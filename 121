
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。

注意你不能在买入股票前卖出股票。

示例 1:

输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
示例 2:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

/******************************************************************************************************/
//改了几下ac的 数组判断空好像不能直接prices == null
class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length == 0)
            return 0;
        int low = 0;
        int high = 0;
        int temp = prices[0];
        for(int i = 0;i < prices.length;i++) {
            if((prices[i]-temp) > (high-low)) {
                low = temp;
                high = prices[i];
            }else if(prices[i]<temp) {
                temp = prices[i];
            }
        }
        return (high-low);
    }
}

//官方给的暴力法 虽然我第一时间想的不是暴力法
public class Solution {
    public int maxProfit(int prices[]) {
        int maxprofit = 0;
        for (int i = 0; i < prices.length - 1; i++) {
            for (int j = i + 1; j < prices.length; j++) {
                int profit = prices[j] - prices[i];
                if (profit > maxprofit)
                    maxprofit = profit;
            }
        }
        return maxprofit;
    }
}

//优化的暴力
public int maxProfit(int[] prices) {
    if(prices.length==0){
        return 0;
    }
    int max =0;
    int min = prices[0];
    for(int i=1;i<prices.length;i++){
        min = Math.min(min,prices[i]);
        max = Math.max(max,prices[i]-min);
    }
    return max;
}