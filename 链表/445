给定两个非空链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储单个数字。将这两数相加会返回一个新的链表。

你可以假设除了数字 0 之外，这两个数字都不会以零开头。

进阶:

如果输入链表不能修改该如何处理？换句话说，你不能对列表中的节点进行翻转。

示例:

输入: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
输出: 7 -> 8 -> 0 -> 7

/******************************************************************************************************/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 //先想出来的一个 都转换为int后再相加 最后放入链表里
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int list1 = 0, 
            list2 = 0, 
            sum = 0;
        while(l1 != null) {
            list1 = list1*10;
            list1 += l1.val;
            l1 = l1.next;
        }
        while(l2 != null) {
            list2 = list2*10;
            list2 += l2.val;
            l2 = l2.next;
        }
        sum = list1 + list2;
        ListNode second = new ListNode(sum%10);
        sum /= 10;
        while(sum > 0) {
            ListNode first = new ListNode(sum%10);
            first.next = second;
            second = first;
            sum /=10;
        }
        return second;
    }
}

//后来想出来的栈 终于ac了 就是写的有点罗嗦
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> stack1 = new Stack<Integer>();
        Stack<Integer> stack2 = new Stack<Integer>();
        while(l1 != null) {
            stack1.push(l1.val);
            l1 = l1.next;
        }
        while(l2 != null) {
            stack2.push(l2.val);
            l2 = l2.next;
        }
        
        int temp1 = 0, 
            temp2 = 0,
            sum = 0;
        ListNode second = null;
        int plus = 0;//进位
        do{
            temp1 = stack1.empty()?0:stack1.pop();
            temp2 = stack2.empty()?0:stack2.pop();
            sum = temp1 + temp2 + plus;//记得加上进位
            plus = sum > 9 ? 1 : 0;//这里进位只存在进1或者不进两种情况 此处计算的是给下一轮用的
            ListNode first = new ListNode(sum%10);
            first.next = second;
            second = first;
        }while(!stack1.empty()||!stack2.empty()||plus == 1);//有最后这个plus == 1 下面那个if就能删了 看了别人的代码学到的
        if(plus == 1) {//报错后加上的，最后可能还有一位没进
            ListNode first = new ListNode(1);
            first.next = second;
            second = first;
        }
        return second;
    }
}

/******************************************************************************************************/
/*递归 先计算两链表长度 使长的作为l1
如果len1与len2都为1，那么当前的值应为（l1.val+l2.val）%10,进位更新为（l1.val+l2.val）/10；
如果len1大于len2，递归计算（l1.next,l2），当前的值应为（l1.val+进位）%10，进位更新为（l1.val+进位）/10；
如果len1等于len2，递归计算（l1.next,l2.next）,当前的值应为（l1.val+进位+l2.val）%10，进位更新为（l1.val+进位+l2.val）/10；
返回当前节点的指针
递归结束*/
class Solution {
    int flow=0;
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1==null) return l2;
        if(l2==null) return l1;
        ListNode res1=l1,res2=l2;
        int len1=0,len2=0;
        while(l1!=null){
            len1++;
            l1=l1.next;
        }
        while(l2!=null){
            len2++;
            l2=l2.next;
        }
        ListNode res=len1>len2?add(res1,res2,len1,len2):add(res2,res1,len2,len1);
        if(flow==1) {
            res1=new ListNode(1);
            res1.next=res;
            return res1;
        }
        return res;
    }
    public ListNode add(ListNode l1, ListNode l2,int len1,int len2) {
        int temp;
        if((len1==1)&&(len2==1)){
            temp=l1.val;
            l1.val=(l1.val+l2.val)%10;
            flow=(temp+l2.val)/10;
            return l1;
        } 
        if(len1>len2) {
            temp=l1.val;
            l1.next=add(l1.next, l2,len1-1,len2);
            l1.val=(temp+flow)%10;
            flow=(temp+flow)/10;
            return l1;
        }
        l1.next=add(l1.next, l2.next,len1-1,len2-1);
        temp=l1.val;
        l1.val=(temp+flow+l2.val)%10;
        flow=(temp+flow+l2.val)/10;
        return l1;

    }
}

//反转链表
    public static ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode reverseL1 = reverse(l1);
        ListNode reverseL2 = reverse(l2);
        return reverse(add(reverseL1, reverseL2, 0));
    }

    public static ListNode add(ListNode l1, ListNode l2, int post) {
        if (l1 == null && l2 == null && post == 0) return null;
        int x = l1 == null ? 0 : l1.val;
        int y = l2 == null ? 0 : l2.val;
        int sum = x + y + post;
        ListNode node = new ListNode(sum % 10);
        node.next = add(l1 == null ? null : l1.next, l2 == null ? null : l2.next, sum / 10);
        return node;
    }

    public static ListNode reverse(ListNode head) {
        if (head == null || head.next == null) return head;
        ListNode node = reverse(head.next);
        head.next.next = head;
        head.next = null;
        return node;
    }