请判断一个链表是否为回文链表。

示例 1:

输入: 1->2
输出: false
示例 2:

输入: 1->2->2->1
输出: true
进阶：
你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？

/******************************************************************************************************/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 //ac了的栈 时间有On 但空间没有O1
class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode head_ = head;
        int count = 0;
        while(head_!=null) {
            count++;
            head_ = head_.next;
        }
        Stack<Integer> stack = new Stack<Integer>();
        for(int i = 0;i<count/2;i++,head = head.next)
            stack.push(head.val);
        head = count%2==1?head.next:head;
        for(int j = 0;j<count/2;j++) {
            if(stack.pop() != head.val)
                return false;
            head = head.next;
        }
        return true;
    }
}

 //想的一个递归 单复数分开了 应该后面可以简化 没有ac 也懒得弄了
class Solution {
    private boolean flag = true;
    public boolean isPalindrome(ListNode head) {
        ListNode head_ = head;
        int count = 0;
        while(head_!=null) {
            count++;
            head_ = head_.next;
        }
        if(count < 2)
            return true;
        if(count%2 == 1 && isPE(head) == null) return false;
        if(count%2 == 0)
            isPO(head);
        return flag;
    }
    private ListNode isPO(ListNode head) {
        if(head.next == null) {
            flag = false;
            return null;
        }
        if(head.val != head.next.val) {
            ListNode temp = isPO(head.next);
            if(temp == null)
                return temp;
            if(head.val != temp.val){
                flag = false;
            }
            return temp.next;
        }
        return head.next.next;
    }
    private ListNode isPE(ListNode head) {
        if(head.next.next == null) {
            flag = false;
            return null;
        }
        if(head.val != head.next.next.val) {
            ListNode temp = isPO(head.next);
            if(temp == null)
                return temp;
            if(head.val != temp.val){
                flag = false;
            }
            return temp.next;
        }
        return head.next.next.next;
    }
}

/******************************************************************************************************/
//cmd的递归
public boolean isPalindrome(ListNode head) {
    if (head == null || head.next == null)
        return true;
    ListNode tmp = head;
    while (head != null) {
        count++;
        head = head.next;
    }
    if (count % 2 != 0) {
        flag = 1;
    }
    count /= 2;
    if (isPalindrome_(tmp) == null)
        return true;
    return false;
}

public ListNode isPalindrome_(ListNode head) {
    if (count == 0) {
        if (flag == 1)
            return head.next;
        return head;
    }
    count--;
    ListNode tmp = isPalindrome_(head.next);
    if (tmp.val == head.val)
        return tmp.next;
    else
        return head;
}

//挪到数组中比较
class Solution {
    public boolean isPalindrome(ListNode head) {
        List<Integer> vals = new ArrayList<>();

        // Convert LinkedList into ArrayList.
        ListNode currentNode = head;
        while (currentNode != null) {
            vals.add(currentNode.val);
            currentNode = currentNode.next;
        }

        // Use two-pointer technique to check for palindrome.
        int front = 0;
        int back = vals.size() - 1;
        while (front < back) {
            // Note that we must use ! .equals instead of !=
            // because we are comparing Integer, not int.
            if (!vals.get(front).equals(vals.get(back))) {
                return false;
            }
            front++;
            back--;
        }
        return true;
    }
}

//官方的递归 orz 是我想不出来的算法 但递归的时空复杂度都是O(n) 具体体现在递归的实现原理上 系统会产生堆栈blablabla
class Solution {

    private ListNode frontPointer;

    private boolean recursivelyCheck(ListNode currentNode) {
        if (currentNode != null) {
            if (!recursivelyCheck(currentNode.next)) return false;
            if (currentNode.val != frontPointer.val) return false;
            frontPointer = frontPointer.next;
        }
        return true;
    }

    public boolean isPalindrome(ListNode head) {
        frontPointer = head;
        return recursivelyCheck(head);
    }
}

//时间On 空间O1的方法 反转后半段链表
class Solution {

    public boolean isPalindrome(ListNode head) {

        if (head == null) return true;

        // Find the end of first half and reverse second half.
        ListNode firstHalfEnd = endOfFirstHalf(head);
        ListNode secondHalfStart = reverseList(firstHalfEnd.next);

        // Check whether or not there is a palindrome.
        ListNode p1 = head;
        ListNode p2 = secondHalfStart;
        boolean result = true;
        while (result && p2 != null) {
            if (p1.val != p2.val) result = false;
            p1 = p1.next;
            p2 = p2.next;
        }        

        // Restore the list and return the result.
        firstHalfEnd.next = reverseList(secondHalfStart);
        return result;
    }

    // Taken from https://leetcode.com/problems/reverse-linked-list/solution/
    private ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        while (curr != null) {
            ListNode nextTemp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextTemp;
        }
        return prev;
    }

    private ListNode endOfFirstHalf(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        while (fast.next != null && fast.next.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
}
