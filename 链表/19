给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。

示例：

给定一个链表: 1->2->3->4->5, 和 n = 2.

当删除了倒数第二个节点后，链表变为 1->2->3->5.
说明：

给定的 n 保证是有效的。

进阶：

你能尝试使用一趟扫描实现吗？

/******************************************************************************************************/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 //最开始的做法 考虑的是操作目标节点前一个节点往后截断 但发现此时难以处理需要操作的节点是第一个节点的情况 无法ac 所以换了下面的一种做法
class Solution {
    int count = 1;
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head == null)
            return head;
        head = removeNthFromEnd(head.next, n);
        if(count == n) {
            return head.next;
        }
        count++;
        return head;
    }
}

//自己的ac做法 这个做法是在目标节点的递归函数中操作，将目标节点.next传给目标节点的前一个节点 感觉应该只遍历了一遍
class Solution {
    int count = 1;//这里用到全局变量 有进步
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head == null)
            return head;
        head.next = removeNthFromEnd(head.next,n);
        count++;
        if(count == n+1)//就是这里感觉有点憨憨
            return head.next;
        return head;
    }
}

/******************************************************************************************************/
//在头节点前设置一个哑节点 遍历两遍 妙啊
public ListNode removeNthFromEnd(ListNode head, int n) {
    ListNode dummy = new ListNode(0);
    dummy.next = head;
    int length  = 0;
    ListNode first = head;
    while (first != null) {
        length++;
        first = first.next;
    }
    length -= n;
    first = dummy;
    while (length > 0) {
        length--;
        first = first.next;
    }
    first.next = first.next.next;
    return dummy.next;
}

//双指针法 一次遍历：我们可以设想假设设定了双指针 p 和 q 的话，当 q 指向末尾的 NULL，p 与 q 之间相隔的元素个数为 n 时，那么删除掉 p 的下一个指针就完成了要求。也需要哑节点。
public ListNode removeNthFromEnd(ListNode head, int n) {
    ListNode dummy = new ListNode(0);
    dummy.next = head;
    ListNode first = dummy;
    ListNode second = dummy;
    // Advances first pointer so that the gap between first and second is n nodes apart
    for (int i = 1; i <= n + 1; i++) {
        first = first.next;
    }
    // Move first to the end, maintaining the gap
    while (first != null) {
        first = first.next;
        second = second.next;
    }
    second.next = second.next.next;
    return dummy.next;
}