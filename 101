给定一个二叉树，检查它是否是镜像对称的。

例如，二叉树 [1,2,2,3,4,4,3] 是对称的。

    1
   / \
  2   2
 / \ / \
3  4 4  3
但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:

    1
   / \
  2   2
   \   \
   3    3
说明:

如果你可以运用递归和迭代两种方法解决这个问题，会很加分。

/******************************************************************************************************/
//自己想出来的递归 递归真是千变万化呢 想了他妈的40分钟
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        TreeNode r1 = root;
        TreeNode r2 = root;
        return Symmetric(r1,r2);
    }

    public boolean Symmetric(TreeNode root1,TreeNode root2) {
        if(root1 == null || root2 == null) {
            if(root1 == null && root2 ==null)
                return true;
            else
                return false;
        }
        if(root1.val != root2.val)
            return false;
        if(!Symmetric(root1.left,root2.right)) {//这一部分的几个if可以优化一下 实在懒得想了
            return false;
        }
        if(!Symmetric(root1.right,root2.left)) {
            return false;
        }
        return true;
    }
}

//答案的好看的递归
public boolean isSymmetric(TreeNode root) {
    return isMirror(root, root);
}

public boolean isMirror(TreeNode t1, TreeNode t2) {
    if (t1 == null && t2 == null) return true;
    if (t1 == null || t2 == null) return false;
    return (t1.val == t2.val)
        && isMirror(t1.right, t2.left)
        && isMirror(t1.left, t2.right);
}

//迭代
public boolean isSymmetric(TreeNode root) {
    Queue<TreeNode> q = new LinkedList<>();
    q.add(root);
    q.add(root);
    while (!q.isEmpty()) {
        TreeNode t1 = q.poll();
        TreeNode t2 = q.poll();
        if (t1 == null && t2 == null) continue;
        if (t1 == null || t2 == null) return false;
        if (t1.val != t2.val) return false;
        q.add(t1.left);
        q.add(t2.right);
        q.add(t1.right);
        q.add(t2.left);
    }
    return true;
}