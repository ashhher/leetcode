Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its depth = 3.

/******************************************************************************************************/
//我的解法 第一次一次ac哈哈哈哈哈哈 感觉写的也挺简介的 有进步
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null)
            return 0;
        int left = maxDepth(root.left);
        int right = maxDepth(root.right);
        return (left>right?left:right) + 1;
    }
}

//BFS广度优先（没加库
public int maxDepth(TreeNode root) {
    Queue<SimpleEntry<TreeNode, Integer>> bfs = new LinkedList<>();

    if (root != null) {
        bfs.add(new SimpleEntry<>(root, 1));
    }

    int depth = 0;

    while (!bfs.isEmpty()) {
        SimpleEntry<TreeNode, Integer> curr = bfs.poll();
        root = curr.getKey();
        if (root != null) {
            int currDepth = curr.getValue();
            depth = Math.max(currDepth, depth);
            bfs.add(new SimpleEntry<TreeNode, Integer>(root.left, currDepth + 1));
            bfs.add(new SimpleEntry<TreeNode, Integer>(root.right, currDepth + 1));
        }
    }
    return depth;
}
