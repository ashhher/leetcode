Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.

Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

Example:

Input:
[4,3,2,7,8,2,3,1]

Output:
[5,6]

/******************************************************************************************************/
//要求不开辟新的空间 一时没想出来。。结果答案第一个就给的哈希
class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        HashMap<Integer, Boolean> hashTable = new HashMap<Integer, Boolean>();
        for (num : nums) {//这里有问题
            hashTable.put(num, true);
        }
        List<Integer> result = new LinkedList<Integer>();
        for (int i = 1; i <= nums.length; i++) {
            if (!hashTable.containsKey(i)) {
                result.add(i);
            }
        }
        return result;
    }
}

//这个方法很巧妙 比如说321466这个数组，缺少5，先假设数组是有顺序的，那么就是123466，比如对应4的位置是a[3]
//此时将a[3] = -a[3]，那么遍历完后，会发现整个数组为-1 -2 -3 -4 6 -6 只有a[4]这个位置的数为正数，即对应数字4+1=5
//然而可以发现 在无序时 该方法也是适用的
class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            int newIndex = Math.abs(nums[i]) - 1;
            if (nums[newIndex] > 0) {
                nums[newIndex] *= -1;
            }
        }
        List<Integer> result = new LinkedList<Integer>();
        for (int i = 1; i <= nums.length; i++) {
            if (nums[i - 1] > 0) {
                result.add(i);
            }
        }
        
        return result;
    }
}