给定一个头结点为 root 的链表, 编写一个函数以将链表分隔为 k 个连续的部分。

每部分的长度应该尽可能的相等: 任意两部分的长度差距不能超过 1，也就是说可能有些部分为 null。

这k个部分应该按照在链表中出现的顺序进行输出，并且排在前面的部分的长度应该大于或等于后面的长度。

返回一个符合上述规则的链表的列表。

举例： 1->2->3->4, k = 5 // 5 结果 [ [1], [2], [3], [4], null ]

示例 1：

输入: 
root = [1, 2, 3], k = 5
输出: [[1],[2],[3],[],[]]
解释:
输入输出各部分都应该是链表，而不是数组。
例如, 输入的结点 root 的 val= 1, root.next.val = 2, \root.next.next.val = 3, 且 root.next.next.next = null。
第一个输出 output[0] 是 output[0].val = 1, output[0].next = null。
最后一个元素 output[4] 为 null, 它代表了最后一个部分为空链表。
示例 2：

输入: 
root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3
输出: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]
解释:
输入被分成了几个连续的部分，并且每部分的长度相差不超过1.前面部分的长度大于等于后面部分的长度。
 

提示:

root 的长度范围： [0, 1000].
输入的每个节点的大小范围：[0, 999].
k 的取值范围： [1, 50].

/******************************************************************************************************/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 //写了好久写出来的 感觉自己好垃圾 链表节点之间的操作还是不太熟悉
class Solution {
	public ListNode[] splitListToParts(ListNode root, int k) {
		ListNode head = root;
		int count = 0;
		while(head!=null) {
			count++;
			head = head.next;
		}
		int part_num = count/k;
		int exce = count % k;
		int parts_num = 0;
		ListNode[] list = new ListNode[k];
		ListNode dummy = new ListNode(0);
		dummy.next = root;//最后还是用了dummy做的 感觉java链表的关键是操作好.next这个连接 所以操作的时候需要将指针尽量停留在前一个节点?

		for(int i = 0; i < k; i++) {
			parts_num = exce > 0 ? (part_num + 1) :part_num;
			exce--;
			for(int j = 0; j < parts_num; j++) {
				if(j == 0)
					list[i] = dummy != null ? dummy.next : null;
				dummy = dummy != null ? dummy.next : null;
			}
			if(dummy != null) {//这里想了好久 =-=
				ListNode temp = new ListNode(0);
				temp.next = dummy.next;
				dummy.next = null;
				dummy = temp;
			}
		}
		return list;
	}
}

/******************************************************************************************************/
//答案的第一种 list中的节点采用new的方式
class Solution {
    public ListNode[] splitListToParts(ListNode root, int k) {
        ListNode cur = root;
        int N = 0;
        while (cur != null) {
            cur = cur.next;
            N++;
        }

        int width = N / k, rem = N % k;

        ListNode[] ans = new ListNode[k];
        cur = root;
        for (int i = 0; i < k; ++i) {
            ListNode head = new ListNode(0), write = head;
            for (int j = 0; j < width + (i < rem ? 1 : 0); ++j) {
                write = write.next = new ListNode(cur.val);
                if (cur != null) cur = cur.next;
            }
            ans[i] = head.next;
        }
        return ans;
    }
}

//答案的第二种 和我的做法是一样的
class Solution {
    public ListNode[] splitListToParts(ListNode root, int k) {
        ListNode cur = root;
        int N = 0;
        while (cur != null) {
            cur = cur.next;
            N++;
        }

        int width = N / k, rem = N % k;

        ListNode[] ans = new ListNode[k];
        cur = root;
        for (int i = 0; i < k; ++i) {
            ListNode head = cur;
            for (int j = 0; j < width + (i < rem ? 1 : 0) - 1; ++j) {
                if (cur != null) cur = cur.next;
            }
            if (cur != null) {
                ListNode prev = cur;
                cur = cur.next;
                prev.next = null;
            }
            ans[i] = head;
        }
        return ans;
    }
}