给定一个二叉树，它的每个结点都存放着一个整数值。

找出路径和等于给定数值的路径总数。

路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。

二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。

示例：

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

返回 3。和等于 8 的路径有:

1.  5 -> 3
2.  5 -> 2 -> 1
3.  -3 -> 11

/******************************************************************************************************/
//难 太难 以下是我改了好多遍还没ac的做法 注意是错的！！
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int temp = 0;
    public int pathSum(TreeNode root, int sum) {
        temp = sum;
        return pS(root,0);
    }
    private int pS(TreeNode root, int count) {
        if(root == null)
            return 0;
        count += root.val;
        if(Math.abs(count) > Math.abs(temp)) {
            return pS(root.left,0) + pS(root.right,0);
        }
        if(count == temp) {
            return 1 + pS(root.left,0) + pS(root.right,0);
        }
        if(Math.abs(count) < Math.abs(temp)) {
            return pS(root.left,count) + pS(root.right,count) + pS(root.left,0) + pS(root.right,0);
        }
        return 0;
    }
}

//大佬的递归
    public int pathSum(TreeNode root, int sum) {
        return pathSum(root, sum, new int[1000], 0);
    }

    public int pathSum(TreeNode root, int sum, int[] array/*保存路径*/, int p/*指向路径终点*/) {//思路巧妙 这个array
        if (root == null) {
            return 0;
        }
        int tmp = root.val;
        int n = root.val == sum ? 1 : 0;//若当前节点值等于目标值 n起始值为1
        for (int i = p - 1; i >= 0; i--) {//从当前节点开始，往上累加
            tmp += array[i];
            if (tmp == sum) {
                n++;//这里思考不break的原因可能是会有连续减掉再加上的情况
            }
        }
        array[p] = root.val;//将该节点增加到路径中，此路径供他的孩子节点使用
        int nl = pathSum(root.left, sum, array, p + 1);
        int nr = pathSum(root.right, sum, array, p + 1);
        return n + nl + nr;
    }