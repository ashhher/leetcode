Invert a binary tree.

Example:

Input:

     4
   /   \
  2     7
 / \   / \
1   3 6   9
Output:

     4
   /   \
  7     2
 / \   / \
9   6 3   1

/******************************************************************************************************/
//我的解法
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root!=null&&(root.left!=null || root.right!=null)) {//此处注意处理root!=null的情况，第一次就在这报了空异常
            invertTree(root.left);//这两句好像也可以放在后面，对于递归函数在程序中调用顺序的思考★
            invertTree(root.right);

            TreeNode temp = new TreeNode(0);
            temp = root.left;
            root.left = root.right;
            root.right = temp;
        }
        return root;
    }
}

//别人的，内存消耗少了一点，比我的更简洁
public TreeNode invertTree(TreeNode root) {
    if (root == null) {
        return null;
    }
    TreeNode right = invertTree(root.right);
    TreeNode left = invertTree(root.left);
    root.left = right;
    root.right = left;
    return root;
}