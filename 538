Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.

Example:

Input: The root of a Binary Search Tree like this:
              5
            /   \
           2     13

Output: The root of a Greater Tree like this:
             18
            /   \
          20     13

/******************************************************************************************************/
//太难了递归 太难了 这个是看了别人用全局变量以后写出来的 写了几个小时 orz
//善用全局变量★
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int count = 0;
    public TreeNode convertBST(TreeNode root) {
        if(root == null)
            return null;
        if(root.right != null) {
            convertBST(root.right);
        }
        int temp = root.val;
        root.val += count;
        count = root.val;
        if(root.left != null) {
            convertBST(root.left);
        }
        return root;
    }
}

//别人的 这么一看我的判断可以都删了
 int add = 0;

    public TreeNode convertBST(TreeNode root) {
        if (root == null) return root;
        convertBST(root.right);
        root.val += add;
        add = root.val;
        convertBST(root.left);
        return root;
    }

//另一种
class Solution {
    public TreeNode convertBST(TreeNode root) {
        if (root != null) {
            dfs(root, 0);
        }
        return root;
    }
    private int dfs(TreeNode node, int sum) {
        if (node == null) {
            return sum;
        }        
        sum = dfs(node.right, sum);        
        node.val += sum;        
        sum = dfs(node.left, node.val);
        return sum;
    }
}